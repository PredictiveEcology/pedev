% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packageTools.R
\name{updateGit}
\alias{updateGit}
\title{Pull from git and install}
\usage{
updateGit(pkgs = NULL, install = TRUE, branch = c("development",
  "master"), cacheRepo = getOption("pedev.cacheRepo", "~/.pedevCache"),
  fetch = TRUE, ...)
}
\arguments{
\item{pkgs}{A character vector of package names, which is actually
the path names of the packages. i.e., must be absolute or relative
path. Defaults to current directory. It will also check in "..",
i.e., one folder up from the current active folder if it doesn't find
\code{pkgs} in the current folder.}

\item{install}{Logical. If TRUE, then it will run \code{devtools::install} if
there is new content. If \code{branch} was length > 1, only the active,
i.e., first branch, will be installed.}

\item{cacheRepo}{The location where subsequent calls will store their history.
To be most effective, this should be "persistent", and not part of any
other cacheRepo.}

\item{fetch}{Logical. Should it fetch before pulling.}

\item{...}{Passed to \code{devtools::install}}

\item{branches}{A vector of branch names to pull from, \emph{in reverse order}
so that the first one is the active branch after this function call finishes.
Default is \code{c("development", "master")}, so it will pull from master,
then development. If one of them does not exist, it will try, deteremine
it doesn't exist, skip it and go to next branch.}
}
\description{
Fetches all branches, then pulls the identified branch from git,
then runs a digest on the local folders. If that digest is different
as a previous one, then the function will run \code{devtools::install}.
This should be safe even in cases where local files have changed. If
they were uncommitted, Git will error, and nothing will be pulled,
and if they were committed, then it will try a merge. If the automoated
merge works, then it will proceed. If automated merge fails, then nothing
will be pulled.
}
\examples{
\dontrun{
# This will pull development branch of all these packages, and install them
#    all, if there are any file changes in each respective directory
allPkgs <- c("quickPlot", "reproducible", "SpaDES.core", "SpaDES.tools",
             "pemisc", "map", "LandR", "pedev")
updateGit(allPkgs)

# Will update and install all development branches of all repositories
#   in ~/GitHub folder
pedev::updateGit(dir("~/GitHub"))
}
}
